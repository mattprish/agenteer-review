import asyncio
import tempfile
import os
import logging
from typing import Dict, Any
import aiohttp
import aiofiles

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Document
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.formatters import format_review, format_progress_message, truncate_text
from .keyboards import (
    get_main_keyboard, get_help_keyboard, get_back_keyboard,
    get_processing_keyboard, get_results_keyboard
)
from .config import config
from utils.pdf.pdf import async_extract_text_from_pdf
verbose = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class ProcessingState(StatesGroup):
    waiting_for_file = State()
    processing = State()

# HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å LLM —Å–µ—Ä–≤–∏—Å–æ–º
class LLMServiceClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI —Å–µ—Ä–≤–µ—Ä–æ–º"""
    
    def __init__(self, base_url: str = "http://localhost:5000"):
        self.base_url = base_url
    
    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/health") as response:
                    return response.status == 200
        except Exception as e:
            logger.error(f"Health check failed: {e}")
            return False
    
    async def upload_pdf(self, file_path: str, filename: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        try:
            with open(file_path, 'rb') as file:
                pdf_content = file.read()
                text = await async_extract_text_from_pdf(pdf_content)
                return {"success": True, "text": text}
        except Exception as e:
            logger.error(f"Error uploading PDF: {e}")
            return {"success": False, "error": str(e)}
    
    async def review_paper(self, text: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            payload = {
                "text": text,
                "metadata": None
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/review", json=payload) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        return {"success": False, "error": f"HTTP {response.status}: {error_text}"}
        except Exception as e:
            logger.error(f"Error reviewing paper: {e}")
            return {"success": False, "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
llm_client = LLMServiceClient()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
active_tasks: Dict[int, asyncio.Task] = {}

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    
    welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π!*

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—É—é –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é –Ω–∞ –≤–∞—à—É –Ω–∞—É—á–Ω—É—é —Ä–∞–±–æ—Ç—É.

üìÑ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∏ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏  
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üöÄ *–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª —Å –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–µ–π –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10 –ú–ë
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 1-2 –º–∏–Ω—É—Ç—ã
    """
    
    await message.answer(
        welcome_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é")
async def request_file(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ñ–∞–π–ª–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    await state.set_state(ProcessingState.waiting_for_file)
    
    instruction_text = """
üìÑ *–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Å –Ω–∞—É—á–Ω–æ–π —Å—Ç–∞—Ç—å–µ–π.

üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É:*
‚Ä¢ –§–æ—Ä–º–∞—Ç: PDF
‚Ä¢ –†–∞–∑–º–µ—Ä: –¥–æ 10 –ú–ë  
‚Ä¢ –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—à–∏–Ω–æ—á–∏—Ç–∞–µ–º—ã–º (–Ω–µ —Å–∫–∞–Ω)
‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

üîç *–ß—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:*
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—É—á–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é!
    """
    
    await message.answer(
        instruction_text,
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )

@router.message(StateFilter(ProcessingState.waiting_for_file), F.document)
async def process_document(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    document: Document = message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not document.file_name.lower().endswith('.pdf'):
        await message.answer(
            "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (10 –ú–ë = 10 * 1024 * 1024 –±–∞–π—Ç)
    if document.file_size > 10 * 1024 * 1024:
        await message.answer(
            "‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10 –ú–ë. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            reply_markup=get_back_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LLM —Å–µ—Ä–≤–∏—Å–∞
    if not await llm_client.health_check():
        await message.answer(
            "‚ùå –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.set_state(ProcessingState.processing)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    progress_message = await message.answer(
        "üîÑ *–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞...*\n\n"
        "üìÑ –ó–∞–≥—Ä—É–∂–∞—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç\n"
        "‚è± –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-2 –º–∏–Ω—É—Ç—ã",
        parse_mode="Markdown",
        reply_markup=get_processing_keyboard()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    task = asyncio.create_task(
        process_file_async(message, document, progress_message, state, verbose=False)
    )
    active_tasks[message.from_user.id] = task

async def process_file_async(message: Message, document: Document, progress_message: Message, state: FSMContext, verbose: bool = False):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    user_id = message.from_user.id
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await progress_message.edit_text(
            "üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...*\n\n"
            "üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...",
            parse_mode="Markdown",
            reply_markup=get_processing_keyboard()
        )
        
        file_info = await message.bot.get_file(document.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        temp_dir = config.TEMP_DIR
        os.makedirs(temp_dir, exist_ok=True)
        
        temp_file_path = os.path.join(temp_dir, f"temp_{user_id}_{document.file_name}")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_info.file_path, temp_file_path)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_message.edit_text(
            "üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...*\n\n"
            "üìÑ –ò–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç –∏–∑ PDF...",
            parse_mode="Markdown",
            reply_markup=get_processing_keyboard()
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
        pdf_result = await llm_client.upload_pdf(temp_file_path, document.file_name)
        
        if not pdf_result.get("success", False):
            await progress_message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF*\n\n"
                f"–î–µ—Ç–∞–ª–∏: {pdf_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode="Markdown",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        await progress_message.edit_text(
            "üîÑ *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...*\n\n"
            "ü§ñ –ê–≥–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
            "‚è± –û—Å—Ç–∞–ª–æ—Å—å –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã...",
            parse_mode="Markdown",
            reply_markup=get_processing_keyboard()
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        review_result = await llm_client.review_paper(
            text=pdf_result["text"]
            # metadata=pdf_result["metadata"]
        )
        print(review_result)
        
        if not review_result.get("success", False):
            await progress_message.edit_text(
                f"‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏*\n\n"
                f"–î–µ—Ç–∞–ª–∏: {review_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                parse_mode="Markdown",
                reply_markup=get_back_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        formatted_review = format_review(
            review_result["results"],
            None,
            verbose=verbose
        )
        
        await progress_message.edit_text(
            "‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            "üìã –ì–æ—Ç–æ–≤–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω—ã–π)
        if len(formatted_review) > 4000:
            parts = [formatted_review[i:i+4000] for i in range(0, len(formatted_review), 4000)]
            for i, part in enumerate(parts):
                if i == 0:
                    await message.answer(
                        part,
                        parse_mode="Markdown",
                        reply_markup=get_results_keyboard() if i == len(parts) - 1 else None
                    )
                else:
                    await message.answer(part, parse_mode="Markdown")
        else:
            await message.answer(
                formatted_review,
                parse_mode="Markdown",
                reply_markup=get_results_keyboard()
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await progress_message.delete()
        except:
            pass
        
    except Exception as e:
        logger.error(f"Error processing file: {e}")
        await progress_message.edit_text(
            f"‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ*\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑.\n"
            f"–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="Markdown",
            reply_markup=get_back_keyboard()
        )
    
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_file_path' in locals() and os.path.exists(temp_file_path):
            try:
                os.unlink(temp_file_path)
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        if user_id in active_tasks:
            del active_tasks[user_id]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
‚ùì *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é*

ü§ñ *–û —Å–∏—Å—Ç–µ–º–µ:*
–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ò–ò. –û–Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.

üìñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ "üìÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å—é"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª (–¥–æ 10 –ú–ë)
3. –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ (1-2 –º–∏–Ω—É—Ç—ã)
4. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Ä–µ—Ü–µ–Ω–∑–∏—é —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

‚öôÔ∏è *–ß—Ç–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è:*
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–ª–æ–∂–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞—É—á–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é

üîß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ FAQ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö*
    """
    
    await message.answer(
        help_text,
        parse_mode="Markdown",
        reply_markup=get_help_keyboard()
    )

@router.message(F.text == "‚öôÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")
async def cmd_about(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    about_text = """
‚öôÔ∏è *–û —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–∏—è*

üî¨ *–í–µ—Ä—Å–∏—è:* 2.0 (–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
ü§ñ *–ê–≥–µ–Ω—Ç—ã:* Structure Agent, Summary Agent
üß† *–ò–ò –º–æ–¥–µ–ª–∏:* Llama-3.2-3B

üìä *–¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
‚Ä¢ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–Ω–∑–∏–π

üèóÔ∏è *–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:*
‚Ä¢ FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8000
‚Ä¢ Telegram –±–æ—Ç —á–µ—Ä–µ–∑ HTTP API
‚Ä¢ Ollama –¥–ª—è LLM –Ω–∞ –ø–æ—Ä—Ç—É 11434
‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤

üë®‚Äçüíª *–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é*
    """
    
    await message.answer(about_text, parse_mode="Markdown")

@router.callback_query(F.data == "cancel_processing")
async def cancel_processing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    user_id = callback.from_user.id
    
    # –û—Ç–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É
    if user_id in active_tasks:
        active_tasks[user_id].cancel()
        del active_tasks[user_id]
    
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå *–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data == "new_analysis")
async def new_analysis(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
    await state.clear()
    await callback.message.edit_text(
        "üìÑ *–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(ProcessingState.waiting_for_file)

@router.callback_query(F.data == "back_to_main")
async def back_to_main(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await callback.message.edit_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def handle_other_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    if current_state == ProcessingState.waiting_for_file:
        await message.answer(
            "üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=get_back_keyboard()
        )
    else:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start",
            reply_markup=get_main_keyboard()
        ) 